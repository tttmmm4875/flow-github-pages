name: PR Preview Deploy

# PRの作成、更新時にトリガー
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

# 必要な権限設定
permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

# 同時実行の制御
concurrency:
  group: pr-preview-${{ github.event.number }}
  cancel-in-progress: true

jobs:
  deploy-preview:
    runs-on: ubuntu-latest
    
    steps:
      # PRにビルド開始をコメント
      - name: Comment build start
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 **プレビュー環境をビルド中...**\n\nビルドが完了次第、プレビューリンクをお知らせします。'
            })

      # ソースコードをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v4

      # Node.jsセットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # 依存関係インストール
      - name: Install dependencies
        run: npm ci

      # モック環境でビルド実行
      - name: Build with mock data
        env:
          VITE_USE_MOCK: 'true'
          PR_NUMBER: ${{ github.event.number }}
        run: npm run build

      # gh-pagesブランチをチェックアウト（存在しない場合は作成）
      - name: Setup gh-pages branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # gh-pagesブランチが存在するかチェック
          if git show-ref --verify --quiet refs/remotes/origin/gh-pages; then
            echo "gh-pages branch exists, checking out..."
            git fetch origin gh-pages
            git checkout gh-pages
          else
            echo "gh-pages branch does not exist, creating orphan branch..."
            git checkout --orphan gh-pages
            git rm -rf .
            # 初期ファイルを作成
            echo "# GitHub Pages" > README.md
            git add README.md
            git commit -m "Initial gh-pages commit"
            git push origin gh-pages
          fi

      # PR用ディレクトリを作成してビルドファイルをコピー
      - name: Deploy to gh-pages
        run: |
          # PR用ディレクトリを作成
          PR_DIR="pr-${{ github.event.number }}"
          
          # 既存のPRディレクトリがあれば削除
          if [ -d "$PR_DIR" ]; then
            rm -rf "$PR_DIR"
          fi
          
          # ビルドファイルをPR用ディレクトリにコピー
          mkdir -p "$PR_DIR"
          cp -r dist/* "$PR_DIR/"
          
          # 変更をコミット・プッシュ
          git add .
          git commit -m "Deploy PR #${{ github.event.number }} preview" || echo "No changes to commit"
          git push origin gh-pages

      # プレビューリンクをPRにコメント
      - name: Comment preview link
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;
            const previewUrl = `https://${repoOwner}.github.io/${repoName}/pr-${prNumber}/`;
            
            const messageBody = [
              '✅ **プレビュー環境のデプロイが完了しました！**',
              '',
              `🔗 **プレビューURL**: ${previewUrl}`,
              '',
              '📝 **詳細情報**:',
              '- モックデータが有効になっています (VITE_USE_MOCK=true)',
              '- PRが更新されるたびに自動で再デプロイされます',
              '- PRがクローズされると自動でクリーンアップされます',
              '',
              '⚠️ **注意**: プレビュー環境の反映には数分かかる場合があります。'
            ].join('\n');
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: repoOwner,
              repo: repoName,
              body: messageBody
            })

      # エラー時のコメント
      - name: Comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '❌ **プレビュー環境のビルドに失敗しました**\n\n詳細はGitHub Actionsのログをご確認ください。'
            })
